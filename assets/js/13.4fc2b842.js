(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{377:function(t,a,s){t.exports=s.p+"assets/img/traefik-dashbord.0f64b31e.png"},378:function(t,a,s){t.exports=s.p+"assets/img/traefik-whoami.260343df.png"},554:function(t,a,s){"use strict";s.r(a);var e=s(11),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"traefik是什么？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#traefik是什么？"}},[t._v("#")]),t._v(" traefik是什么？")]),t._v(" "),e("ul",[e("li",[t._v("Træfɪk 是一个为了让部署微服务更加便捷而诞生的现代HTTP反向代理、负载均衡工具。")]),t._v(" "),e("li",[t._v("好处：百度一下")]),t._v(" "),e("li",[t._v("坏处：百度一下")])]),t._v(" "),e("p",[t._v("中文网："),e("a",{attrs:{href:"https://docs.traefik.cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://docs.traefik.cn/"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"前提"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前提"}},[t._v("#")]),t._v(" 前提")]),t._v(" "),e("blockquote",[e("p",[t._v("首先安装好 docker 以及 docker-compose")]),t._v(" "),e("p",[t._v("我的服务器ip是：192.168.3.14")]),t._v(" "),e("p",[t._v("本机的ip地址：192.168.3.35")])]),t._v(" "),e("h2",{attrs:{id:"安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),e("p",[t._v("首先任意找到一个"),e("code",[t._v("空文件夹")]),t._v("，创建一个"),e("code",[t._v("docker-compose-yaml")]),t._v(" 文件")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("version")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3.5'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("services")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("traefik")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" traefik\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("command")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("api.insecure=true "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("providers.docker "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启用webUI 并告诉Traefile去监听docker的容器实例")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token datetime number"}},[t._v("80:80")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 宿主机（本机暴露端口）：容器内部的端口，一般是默认的，不要随意改动")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" 8008"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# webUI暴露的端口(必须制定--api.insecure=true才可以访问)")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("volumes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 指定docker的sock文件来让traefik获取docker的事件，从而实现动态负载均衡")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" /var/run/docker.sock"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/var/run/docker.sock\n\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("whoami")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" containous/whoami\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("labels")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"traefik.http.routers.whoami.rule=Host(`whoami.test`)"')]),t._v("\n")])])]),e("p",[t._v("说明：")]),t._v(" "),e("p",[e("code",[t._v("whoami.test")]),t._v("  假如我们访问 "),e("code",[t._v("whoami.test")]),t._v(" 指向的是 "),e("code",[t._v("whoami")]),t._v(" 这个服务(留意下面的whoami操作)。")]),t._v(" "),e("h2",{attrs:{id:"启动"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启动"}},[t._v("#")]),t._v(" 启动")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("docker-compose up -d\n")])])]),e("h2",{attrs:{id:"查看"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看"}},[t._v("#")]),t._v(" 查看")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("docker-compose "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("\n➜  docker-compose "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v("\ntraefik_traefik_1   /entrypoint.sh --api.insec "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".   Up      "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(".0.0:80-"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("/tcp,:::80-"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("/tcp, "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(".0.0:8008-"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v("/tcp,:::8008-"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v("/tcp\ntraefik_whoami_1    /whoami                          Up      "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("/tcp\n")])])]),e("p",[t._v("如果两个服务都是 "),e("code",[t._v("up")]),t._v(" 状态及表示安装成功。")]),t._v(" "),e("h2",{attrs:{id:"查看traefik后台"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看traefik后台"}},[t._v("#")]),t._v(" 查看traefik后台")]),t._v(" "),e("p",[t._v("浏览器访问：ip:8008")]),t._v(" "),e("p",[e("img",{attrs:{src:s(377),alt:"image-20210826170611946"}})]),t._v(" "),e("h1",{attrs:{id:"如何通过traefik访问whoami"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何通过traefik访问whoami"}},[t._v("#")]),t._v(" 如何通过traefik访问whoami")]),t._v(" "),e("p",[t._v("首先在本机的 "),e("code",[t._v("hosts")]),t._v(" 文件中添加一个解析指向服务器的traefik")]),t._v(" "),e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("192.168.3.14 whoami.test\n")])])]),e("p",[t._v("我们直接通过"),e("code",[t._v("本机")]),t._v(" 浏览器访问：whoami.test , 即可访问到 "),e("code",[t._v("whoami")]),t._v(" 这个服务了。")]),t._v(" "),e("h1",{attrs:{id:"如何提现出他的负载均衡呢？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何提现出他的负载均衡呢？"}},[t._v("#")]),t._v(" 如何提现出他的负载均衡呢？")]),t._v(" "),e("p",[t._v("在我们的 "),e("code",[t._v("docker-compose.yaml")]),t._v(" 文件中，我们并没有给"),e("code",[t._v("whoami")]),t._v("暴露端口给外界访问，所以不会存在端口冲突问题，此时我们可以将"),e("code",[t._v("whoami")]),t._v(" 这个服务扩展到3个")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("docker-compose up -d --scale whoami=3\n")])])]),e("p",[e("img",{attrs:{src:s(378),alt:"image-20210826171819728"}})]),t._v(" "),e("p",[t._v("多次刷新："),e("code",[t._v("whoami.test")]),t._v(" ，你会发现，whoami 的 "),e("code",[t._v("Hostname")]),t._v(" 名字是动态变化的，也就是说"),e("code",[t._v("whoami")]),t._v("现在已经实现了负载均衡。")]),t._v(" "),e("p",[t._v("简单的traefik入门就到这里，欢迎大家加入我们的交流群一起讨论。")]),t._v(" "),e("h1",{attrs:{id:"basic-auth：为traefik设置账号密码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#basic-auth：为traefik设置账号密码"}},[t._v("#")]),t._v(" Basic Auth：为traefik设置账号密码")]),t._v(" "),e("p",[t._v("使用 Traefik 为应用添加 Basic Auth 非常简单，只需要定义一个包含 basicAuth 用户名密码的中间件声明，然后在需要使用 Basic Auth 验证的服务路由上引用它即可，像是下面这样：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('labels:\n...\n  - "traefik.http.middlewares.test-auth.basicauth.users=test:$$apr1$$H6uskkkW$$IgXLP6ewTrSuBkTrqE8wj/,test2:$$apr1$$d9hr9HBB$$4HxwgUir3HP4EsggP/QNo0"\n  - "traefik.http.routers.test-auth-ssl.middlewares=test-auth@docker"\n...\n\n')])])]),e("p",[t._v("随便输入账号密码，或者取消输入，会获得 401 Unauthorized 的错误提示，如果我们输入账号和密码为 test 的内容，点击确定，则可以正常看到 Demo 服务的页面内容。")]),t._v(" "),e("p",[t._v("如何生成 Basic Auth 账号密码\n如果你是 macOS 用户，系统默认携带了 apache htpasswd 工具，可以直接生成上面配置中的账号密码。")]),t._v(" "),e("p",[t._v("htpasswd -nb test test\ntest:$apr1$lH3nyBaa$/wCu0V3.1kYdpZPHRbiyv/\n1\n2\n如果你的系统中找不到这个命令行，你也不想安装 apache utils，那么可以使用 Docker 来生成账号密码：")]),t._v(" "),e("p",[t._v("docker run --rm -it --entrypoint /usr/local/apache2/bin/htpasswd httpd:alpine -nb test test\n1\n"),e("span",{staticStyle:{color:"red"}},[t._v("但是需要注意的是，在 compose 中使用的话，密码中的 $ 需要使用 $ 来进行替换，解决转义问题。")]),t._v("使用文件来定义、管理用户密码，需要声明下面的内容到 labels 字段中：")]),t._v(" "),e("ul",[e("li",[t._v('"traefik.http.middlewares.test-auth.basicauth.usersfile=/path/to/my/usersfile"\n1\n并在一个文件中使用换行来保存我们生成的用户名和密码：')])]),t._v(" "),e("p",[t._v("test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/\ntest2:$apr1$d9hr9HBB$4HxwgUir3HP4EsggP/QNo0\n1\n2\n如果你希望每个应用有其独立的账号密码，不希望用户账号混在一起存放、管理，那么可以使用环境变量和项目环境配置文件来解决这个问题。")]),t._v(" "),e("p",[t._v("先定义一个读取环境变量的验证中间件：")]),t._v(" "),e("ul",[e("li",[t._v('"traefik.http.middlewares.test-auth.basicauth.users=$AUTH_USER_LIST"\n1\n然后在 compose 同级目录中创建一个 .env 文件，以英文逗号为分隔符，传入生成的用户鉴权信息即可：')])]),t._v(" "),e("p",[t._v("test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/,test2:$apr1$d9hr9HBB$4HxwgUir3HP4EsggP/QNo0\n1\n手动选择是否要将验证信息透传\n默认情况下，当我们登录后，Traefik 会将授权后的验证头发送至后方的服务，我们在 header 中能看到类似下面的信息：")]),t._v(" "),e("p",[t._v("Authorization: Basic dGVzdDp0ZXN0\n1\n有一些应用支持使用请求头中的数据作为鉴权登录信息，而我们定义的用户信息很可能和系统的鉴权信息是不同的（也不推荐使用这个方案做为多数情况下应用鉴权方案），所以造成应用无法正常登陆，所以此刻我们要将这个鉴权操作的作用范围做一个限制，让它仅仅生效在首次访问应用前，流量到达 Traefik 时：")]),t._v(" "),e("ul",[e("li",[t._v('"traefik.http.middlewares.test-auth.basicauth.removeheader=true"\n1\n在添加了上面内容后，我们可以看到输入账号密码后，Traefik 不会再进行 Authorization 请求头的透传。')])]),t._v(" "),e("p",[t._v("用还是不用，这是个问题\n虽然相对详细的介绍了 Basic Auth，但是并不推荐大范围或者将其作为唯一鉴权手段。")]),t._v(" "),e("p",[t._v("因为在标准规范中，它使用 Base64 对用户名密码进行编码，然后传递给其他应用。众所周知 Base64 是可逆编码的，所以我们使用 Basic Auth 来保护应用其实并不安全，比如我们将前文中的 Authorization: Basic dGVzdDp0ZXN0 最后一段内容 dGVzdDp0ZXN0 进行解码，能够直接得到明文的 test:test。")]),t._v(" "),e("p",[t._v("但是如果你的系统未公开暴露于网络，并且使用人员有限，或提供开放服务，但是单纯不希望被搜索引擎抓取，可以在应用前端套一层 Basic Auth，相比较用户、爬虫能够直接访问到机器，这样还能够节约大量不必要的计算资源浪费。")]),t._v(" "),e("p",[t._v("不要单纯听从网络人云亦云，一刀切完全不用，克制的使用在适合的场景下，事半功倍。")])])}),[],!1,null,null,null);a.default=r.exports}}]);