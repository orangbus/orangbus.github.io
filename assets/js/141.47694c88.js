(window.webpackJsonp=window.webpackJsonp||[]).push([[141],{657:function(t,e,n){"use strict";n.r(e);var i=n(11),a=Object(i.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p",[n("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d7758243f96a4af4a964ee3df1e5e66a~tplv-k3u1fbpfcp-watermark.image",alt:"image.png"}})]),t._v(" "),n("h2",{attrs:{id:"简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),n("p",[t._v("什么是MeiliSearch?")]),t._v(" "),n("p",[t._v("MeiliSearch是用Rust实现的开源搜索引擎，在很多功能上和elasticsearch相似，应用场景就是业务搜索，虽然也能存储日志和检索数据，但没有elasticsearch方便和强大")]),t._v(" "),n("p",[n("strong",[t._v("特点")])]),t._v(" "),n("ul",[n("li",[t._v("搜索即体验（返回结果 < 50 毫秒）")]),t._v(" "),n("li",[t._v("全文检索")]),t._v(" "),n("li",[t._v("错别字容忍（理解错别字和拼写错误）")]),t._v(" "),n("li",[t._v("搜索和过滤器")]),t._v(" "),n("li",[t._v("支持汉字（汉字）")]),t._v(" "),n("li",[t._v("支持同义词")]),t._v(" "),n("li",[t._v("易于安装、部署和维护")]),t._v(" "),n("li",[t._v("支持返回整个文档")]),t._v(" "),n("li",[t._v("高度可定制")]),t._v(" "),n("li",[t._v("RESTful API")])]),t._v(" "),n("p",[t._v("官网传送门: "),n("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fdocs.meilisearch.com%2F",title:"https://docs.meilisearch.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("docs.meilisearch.com/"),n("OutboundLink")],1)]),t._v(" "),n("h2",{attrs:{id:"安装"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),n("p",[t._v("使用官方推荐的docker方式一键安装,如果只想做实验，不持久数据，可将-v等参数删除")]),t._v(" "),n("p",[t._v("该服务大概在10秒后启动完成，启动快，易于部署")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('docker run -p 7700:7700 -v "$(pwd)/data.ms:/data.ms" getmeili/meilisearch\n复制代码\n')])])]),n("p",[t._v("下载示例数据：")]),t._v(" "),n("p",[t._v("按照官网提示操作下载: "),n("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fmeilisearch%2FMeiliSearch%23create-an-index-and-upload-some-documents",title:"https://github.com/meilisearch/MeiliSearch#create-an-index-and-upload-some-documents",target:"_blank",rel:"noopener noreferrer"}},[t._v("github.com/meilisearch…"),n("OutboundLink")],1)]),t._v(" "),n("p",[n("strong",[t._v("导入示例数据")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("curl -i -X POST 'http://127.0.0.1:7700/indexes/movies/documents' \\\n  --header 'content-type: application/json' \\\n  --data-binary @movies.json\n复制代码\n")])])]),n("h3",{attrs:{id:"ui"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ui"}},[t._v("#")]),t._v(" UI")]),t._v(" "),n("p",[t._v("完成上面步骤后，打开"),n("a",{attrs:{href:"https://link.juejin.cn?target=http%3A%2F%2Fip%3A7700",title:"http://ip:7700",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://ip:7700"),n("OutboundLink")],1),t._v(" 访问MeiliSearch UI，该UI默认为开启，如果在生产环境建议关闭，避免数据安全问题")]),t._v(" "),n("p",[t._v("以下为演示搜索GIF图，可见搜索非常快 ---图片来源于官网 "),n("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/753237e2f4f34b64a0da6f84f097a732~tplv-k3u1fbpfcp-watermark.image",alt:"trumen-fast.gif"}})]),t._v(" "),n("h2",{attrs:{id:"使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[t._v("#")]),t._v(" 使用")]),t._v(" "),n("p",[t._v("请求方式elasticsearch一样支持http方式，也支持各种SDK")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5c9ee849fe77495592d483ea13bd815b~tplv-k3u1fbpfcp-watermark.image",alt:"image.png"}})]),t._v(" "),n("h3",{attrs:{id:"curl方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#curl方式"}},[t._v("#")]),t._v(" curl方式")]),t._v(" "),n("p",[t._v("直接使用curl命令请求地址+路径参数，就可以返回数据，管道符 | 后面的jq 是linux下的json格式化工具，需另行安装")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("curl 'http://127.0.0.1:7700/indexes/movies/search?q=botman+robin&limit=2' | jq\n复制代码\n")])])]),n("h3",{attrs:{id:"web界面"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#web界面"}},[t._v("#")]),t._v(" web界面")]),t._v(" "),n("p",[t._v("官方还另外提供了一个开源web项目，用于交互测试和使用MeiliSearch(纯js写的，咋就不是基于vue的了✨)，可以说服务真周到")]),t._v(" "),n("p",[t._v("传送门: "),n("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fmeilisearch%2Fmini-dashboard",title:"https://github.com/meilisearch/mini-dashboard",target:"_blank",rel:"noopener noreferrer"}},[t._v("github.com/meilisearch…"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("虽说有工具可以直接用，但要集成到业务还是要写代码的，下面基于Go SDK演示一些示例")]),t._v(" "),n("h2",{attrs:{id:"api例子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#api例子"}},[t._v("#")]),t._v(" API例子")]),t._v(" "),n("p",[t._v("MeiliSearch的api，可以分为五大类")]),t._v(" "),n("ul",[n("li",[t._v("索引操作")]),t._v(" "),n("li",[t._v("文档操作")]),t._v(" "),n("li",[t._v("搜索操作")]),t._v(" "),n("li",[t._v("设置管理")]),t._v(" "),n("li",[t._v("系统管理")])]),t._v(" "),n("p",[t._v("其中"),n("code",[t._v("文档操作")]),t._v("里面包括了索引操作，在操作文档里如果 索引不存在会自动创建等")]),t._v(" "),n("p",[t._v("系统和设置类属于 索引的配置项管理和运维部分")]),t._v(" "),n("h3",{attrs:{id:"初始化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#初始化"}},[t._v("#")]),t._v(" 初始化")]),t._v(" "),n("p",[t._v("简化后续的代码冗余，这里设置客户端为全局")]),t._v(" "),n("p",[t._v("因为启动服务没有设置apikey，这里有空，如想设置，例子: export MEILI_MASTER_KEY=xxx")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('var (\n   client *meilisearch.Client\n   err error\n)\n\nfunc init() {\n   client = meilisearch.NewClient(meilisearch.ClientConfig{\n      Host:    "http://ip:7700",\n      APIKey:  "",\n      Timeout: 0,\n   })\n}\n复制代码\n')])])]),n("h3",{attrs:{id:"索引操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#索引操作"}},[t._v("#")]),t._v(" 索引操作")]),t._v(" "),n("p",[t._v("索引操作，api直接提供了语义化的 方法。调用执行既可，包括创建，查看，和删除等")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('func indexOperation()  {\n   idx := "fruits"\n   //创建索引\n   index, _ := client.CreateIndex(&meilisearch.IndexConfig{\n      Uid:        idx,\n      PrimaryKey: idx + "_id",\n   })\n   fmt.Println(index.UID)\n\n   //获取索引\n   index2, _ := client.GetIndex(idx)\n   fmt.Println(index2)\n\n   //删除索引\n   ok, _ := client.DeleteIndex(idx)\n   fmt.Println(ok)\n\n   //列出所有索引\n   indexes, _ := client.GetAllIndexes()\n   fmt.Println(indexes)\n}\n复制代码\n')])])]),n("h3",{attrs:{id:"文档操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#文档操作"}},[t._v("#")]),t._v(" 文档操作")]),t._v(" "),n("p",[t._v("前面使用curl导入了 一批官方提供的数据，这里根据这些数据 来实例文档类的api")]),t._v(" "),n("p",[t._v("其中值得注意的是 增加文档和更新文档的操作。。")]),t._v(" "),n("ul",[n("li",[t._v("增加文档:")])]),t._v(" "),n("p",[t._v("如果索引不存在，自动创建。如果文档不存将创建新的文档，如果文档存在，整个文档将被覆盖，且先前文档中不在于新文档的 字段将被删除")]),t._v(" "),n("ul",[n("li",[t._v("更新文档")])]),t._v(" "),n("p",[t._v("如果索引不存在，自动创建。该更新只会更新旧文档的部分内容，旧的文档不存在于新文档的字段都会保留")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('func documentsOperation() {\n\n   indexName := "movies"\n\n   //获取一个文档\n   var a interface{}\n   client.Index(indexName).GetDocument("25684", &a)\n   fmt.Println(a)\n\n   //获取所有文档\n   var b interface{}\n   request := meilisearch.DocumentsRequest{Limit:2}\n   client.Index(indexName).GetDocuments(&request,&b)\n   fmt.Println(b)\n\n   //增加文档\n   documents := []map[string]interface{}{\n      {\n         "id":           287949,\n         "title":        "Shazam",\n         "poster":       "https://image.tmdb.org/t/p/w1280/xnopI5Xtky18MPhK40cZAGAOVeV.jpg",\n         "overview":     "A boy is given the ability to become an adult superhero in times of need with a single magic word.",\n         "release_date": "2019-03-23",\n      },\n   }\n   addDocuments, _ := client.Index(indexName).AddDocuments(documents)\n   fmt.Println(addDocuments.UpdateID)\n\n   //更新文档\n   documents2 := []map[string]interface{}{\n      {\n         "id":     287947,\n         "title":  "Shazam ⚡️",\n         "genres": "comedy",\n      },\n   }\n   updateDocuments2, _ := client.Index(indexName).UpdateDocuments(documents2)\n   fmt.Println(updateDocuments2.UpdateID)\n\n   //删除一个文档\n   document, _ := client.Index(indexName).DeleteDocument("25684")\n   fmt.Println(document.UpdateID)\n\n   //批量删除\n   client.Index("movies").DeleteDocuments([]string{"23488", "153738", "437035", "363869",})\n\n   //删除所有文档\n   client.Index("movies").DeleteAllDocuments()\n}\n复制代码\n')])])]),n("h3",{attrs:{id:"搜索操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#搜索操作"}},[t._v("#")]),t._v(" 搜索操作")]),t._v(" "),n("p",[t._v("一但数据写进去，大部分的操作就是查数据了，搜索的api就一个Search")]),t._v(" "),n("p",[t._v("Search接收一个结构体SearchRequest的数据，该结构体支持10种条件(过滤，高亮，限制，长度，跳过等等)")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cfb2348ac5404e579853389636407eeb~tplv-k3u1fbpfcp-watermark.image",alt:"image.png"}})]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('func searchOperation() {\n\n   //限制返回结果为10条\n   request := &meilisearch.SearchRequest{\n      Limit: 10,\n   }\n   search, err := client.Index("movies").Search("Harry Potter", request)\n   if err != nil {\n      log.Println("查询错误: ",err)\n   }\n   fmt.Println(search.Hits)\n   \n   //高亮显示\n   //过滤book_id 大于10的\n   request2 := &meilisearch.SearchRequest{\n      AttributesToHighlight: []string{"*"},\n      Filters: "book_id > 10",\n   }\n   search2, _ := client.Index("movies").Search("prince", request2)\n   fmt.Println(search2.Hits)\n}\n复制代码\n')])])]),n("h3",{attrs:{id:"设置管理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#设置管理"}},[t._v("#")]),t._v(" 设置管理")]),t._v(" "),n("p",[t._v("设置管理是针对索引的配置项，针对单个索引，也可以全局所有索引")]),t._v(" "),n("p",[t._v("其中配置项为: 同义词，停用词，排行规则，过滤属性，独特属性，搜索属性，显示属性")]),t._v(" "),n("p",[t._v("以下示例中演示了，查看，设置，重置配置项的方法")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('func settingsManager() {\n   //查看索引全部配置项\n   settings, _ := client.Index("movies").GetSettings()\n   fmt.Printf("%#v",settings)\n\n   //更新索引全部配置项\n   distinctAttribute := "movies"\n   settingsData := meilisearch.Settings{\n      RankingRules: []string{\n         "words",\n         "typo",\n         "proximity",\n         "attribute",\n         "exactness",\n         "desc(release_date)",\n         "desc(rank)",\n      },\n      DistinctAttribute: &distinctAttribute,\n      SearchableAttributes: []string{\n         "title",\n         "description",\n         "genre",\n      },\n      DisplayedAttributes: []string{\n         "title",\n         "description",\n         "genre",\n         "release_date",\n      },\n      StopWords: []string{\n         "the",\n         "a",\n         "an",\n      },\n      Synonyms: map[string][]string{\n         "wolverine": []string{"xmen", "logan"},\n         "logan":     []string{"wolverine"},\n      },\n   }\n   updateSettings, _ := client.Index("movies").UpdateSettings(&settingsData)\n   fmt.Println(updateSettings.UpdateID)\n\n   //重置索引全部配置项\n   resetSettings, _ := client.Index("movies").ResetSettings()\n   fmt.Println(resetSettings)\n\n   //查看索引停用词\n   words, _ := client.Index("movies").GetStopWords()\n   fmt.Println(words)\n\n   //更新索引停用词\n   stopWords := []string{"of","the","to"}\n   updateStopWords, _ := client.Index("movies").UpdateStopWords(&stopWords)\n   fmt.Println(updateStopWords.UpdateID)\n\n   //重置索引停用词\n   resetStopWords, _ := client.Index("movies").ResetStopWords()\n   fmt.Println(resetStopWords.UpdateID)\n\n   //查看索引排名规则\n   rules, _ := client.Index("movies").GetRankingRules()\n   fmt.Println(rules)\n\n   //更新索引排名规则\n   rankingRules := []string{\n      "words",\n      "typo",\n      "proximity",\n      "attribute",\n      "exactness",\n      "asc(release_date)",\n      "desc(rank)",\n   }\n   updateRankingRules, _ := client.Index("movies").UpdateRankingRules(&rankingRules)\n   fmt.Println(updateRankingRules.UpdateID)\n\n   //重置索引排名规则\n   resetRankingRules, _ := client.Index("movies").ResetRankingRules()\n   fmt.Println(resetRankingRules.UpdateID)\n\n   //过滤属性  暂未实现\n\n   //查看索引独特属性\n   attribute, _ := client.Index("movies").GetDistinctAttribute()\n   fmt.Println(attribute)\n\n   //更新索引独特属性\n   updateDistinctAttribute, _ := client.Index("movies").UpdateDistinctAttribute("movie_id")\n   fmt.Println(updateDistinctAttribute.UpdateID)\n\n   //重置索引独特属性\n   resetDistinctAttribute, _ := client.Index("movies").ResetDistinctAttribute()\n   fmt.Println(resetDistinctAttribute.UpdateID)\n\n   //查看索引搜索属性\n   attributes, _ := client.Index("movies").GetSearchableAttributes()\n   fmt.Println(attributes)\n\n   //更新索引搜索属性\n   searchableAttributes := []string{\n      "title",\n      "description",\n      "genre",\n   }\n   updateSearchableAttributes, _ := client.Index("movies").UpdateSearchableAttributes(&searchableAttributes)\n   fmt.Println(updateSearchableAttributes.UpdateID)\n\n   //重置索引搜索属性\n   resetSearchableAttributes, _ := client.Index("movies").ResetSearchableAttributes()\n   fmt.Println(resetSearchableAttributes.UpdateID)\n\n   //查看索引显示属性\n   displayedAttributes, _ := client.Index("movies").GetDisplayedAttributes()\n   fmt.Println(displayedAttributes)\n\n   //更新索引显示属性\n   displayedAttributesData := []string{\n      "title",\n      "description",\n      "genre",\n      "release_date",\n   }\n   updateDisplayedAttributes, _ := client.Index("movies").UpdateDisplayedAttributes(&displayedAttributesData)\n   fmt.Println(updateDisplayedAttributes.UpdateID)\n\n   //重置索引显示属性\n   resetDisplayedAttributes, _ := client.Index("movies").ResetDisplayedAttributes()\n   fmt.Println(resetDisplayedAttributes.UpdateID)\n\n}\n复制代码\n')])])]),n("h3",{attrs:{id:"系统管理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#系统管理"}},[t._v("#")]),t._v(" 系统管理")]),t._v(" "),n("p",[t._v("该部分api，主要是围绕着运维相关的事宜，任务状态，健康检测，数据备份等")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('func systemManager() {\n   //获取更新状态\n   status, _ := client.Index("movies").GetUpdateStatus(1)\n   fmt.Println(status)\n\n   //获取全部更新状态\n   updateStatus, _ := client.Index("movies").GetAllUpdateStatus()\n   fmt.Println(updateStatus)\n\n   //获取索引的统计信息\n   stats, _ := client.Index("movies").GetStats()\n   fmt.Println(stats)\n\n   //获取全部索引的统计信息\n   allStats, _ := client.GetAllStats()\n   fmt.Println(allStats)\n\n   //检查实例健康状况\n   health, _ := client.Health()\n   fmt.Println(health.Status)\n\n   //要看实例版本信息\n   version, _ := client.GetVersion()\n   fmt.Println(version.BuildDate,version.PkgVersion)\n\n   //创建备份\n   respDump, _ := client.CreateDump()\n   fmt.Println(respDump.Status)\n\n   //查看备份状态\n   respDumpStatus, _ := client.GetDumpStatus(respDump.UID)\n   fmt.Println(respDumpStatus)\n}\n复制代码\n')])])]),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),n("p",[t._v("MeiliSearch测试下来，在小业务量搜索方面，确实做到 部署快，启动快，搜索快等特点(没有大业务量环境)，在搜索场景下又多了一个选择")]),t._v(" "),n("p",[t._v("api方便语义化非常好，使用方便简洁，执行的动作对应一个方法，非常的照顾小白了")]),t._v(" "),n("p",[t._v("感觉可以集成到 管理后台搜索，小程序搜索，博客搜索，内部资源搜索等场景中")]),t._v(" "),n("p",[t._v("当然千言万语还不如自已实际使用一下，感觉一下，下一代搜索引擎MeiliSearch")])])}),[],!1,null,null,null);e.default=a.exports}}]);